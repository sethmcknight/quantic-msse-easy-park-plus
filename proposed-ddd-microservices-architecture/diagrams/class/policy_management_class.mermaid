classDiagram
    class Policy {
        <<Aggregate Root>>
        +PolicyId policy_id
        +String name
        +String description
        +PolicyTypeEnum policy_type
        +PolicyScopeEnum policy_scope
        +List~String~ scope_identifiers // e.g., LotId, CustomerSegmentId, VehicleCategoryId
        +List~PolicyRule~ rules
        +TimeRange validity_period
        +PolicyStatusEnum status
        +Integer version
        +createPolicy(name, description, type, scope, rules, validity, status)
        +addRule(rule_details)
        +updateRule(rule_id, updates)
        +removeRule(rule_id)
        +updateStatus(new_status)
        +createNewVersion(new_rules, new_validity)
        +getApplicableRules(context_data) List~PolicyRule~
        +publish_policy_created_event() DomainEvent
        +publish_policy_updated_event() DomainEvent
        +publish_policy_activated_event() DomainEvent
        +publish_policy_deactivated_event() DomainEvent
    }

    class PolicyId {
        <<Value Object>>
        +UUID id
    }

    class PolicyRule {
        <<Entity>>
        +RuleId rule_id
        +String name
        +String description
        +List~Condition~ conditions
        +List~Action~ actions_on_match
        +Integer priority // For conflict resolution
        +evaluateConditions(context_data) Boolean
        +getActions() List~Action~
    }

    class RuleId {
        <<Value Object>>
        +UUID id
    }

    class Condition {
        <<Value Object>>
        +ConditionId condition_id
        +String attribute_name // e.g., "customer.type", "vehicle.category", "visit.duration_minutes"
        +OperatorEnum operator
        +String value_to_compare
        +String data_type // String, Number, Boolean, DateTime
        +evaluate(context_data) Boolean
    }

    class ConditionId {
        <<Value Object>>
        +UUID id
    }

    class Action {
        <<Value Object>>
        +ActionId action_id
        +ActionTypeEnum action_type // e.g., ApplyDiscount, SetGracePeriod, TriggerValetOffer
        +Map~String,Any~ parameters // Stores key-value pairs for action configuration
        +execute(context_data) // Conceptual, actual execution is by consuming service
    }

    class ActionId {
        <<Value Object>>
        +UUID id
    }

    class TimeRange {
        <<Value Object>>
        +DateTime start_time
        +DateTime end_time
    }

    class PolicyTypeEnum {
        <<Enumeration>>
        ParkingPricingModifier // Modifies base price from Pricing Service
        ParkingAccessControl
        EVChargingEligibility
        ValidationRule // For discounts, free parking
        ValetServiceOffer
        GracePeriod
        OverstayPenalty
        CustomerSegmentSpecific
        OperationalFallback // Handled by SystemConfig, but policies might be referenced
    }

    class PolicyScopeEnum {
        <<Enumeration>>
        Global
        LotSpecific
        LevelSpecific
        SlotTypeSpecific
        CustomerSegment
        VehicleCategory
        TimeOfDay
        DayOfWeek
    }

    class PolicyStatusEnum {
        <<Enumeration>>
        Draft
        Active
        Inactive
        Archived
        PendingApproval
    }

    class OperatorEnum {
        <<Enumeration>>
        EQUALS
        NOT_EQUALS
        GREATER_THAN
        LESS_THAN
        GREATER_THAN_OR_EQUAL_TO
        LESS_THAN_OR_EQUAL_TO
        IN_LIST
        NOT_IN_LIST
        CONTAINS
        STARTS_WITH
        ENDS_WITH
        IS_TRUE
        IS_FALSE
        IS_NULL
        IS_NOT_NULL
        MATCHES_REGEX
    }

    class ActionTypeEnum { // For Policy Actions
        <<Enumeration>>
        ApplyDiscountPercentage
        ApplyFixedDiscountAmount
        SetFixedPrice
        OverrideBaseRate
        GrantFreeParking
        SetGracePeriodMinutes
        TriggerValetServiceOffer
        AssignValetPriority
        ApplyOverstayFeeRule
        RestrictAccess
        AllowAccess
        RequireValidationCode
        NotifyStaff
        LogSpecialEvent
    }

    Policy "1" *-- "1" PolicyId : has
    Policy "1" *-- "0..*" PolicyRule : contains
    PolicyRule "1" *-- "1" RuleId : has
    PolicyRule "1" *-- "0..*" Condition : has
    PolicyRule "1" *-- "0..*" Action : defines
    Condition "1" *-- "1" ConditionId : has
    Action "1" *-- "1" ActionId : has

    Policy -- PolicyTypeEnum : is_of_type
    Policy -- PolicyScopeEnum : has_scope
    Policy -- PolicyStatusEnum : has_status
    Condition -- OperatorEnum : uses_operator
    Action -- ActionTypeEnum : performs_action_type

    note for Policy "Manages business rules and policies for parking, EV charging, and operational decisions."
